import { createSlice } from "@reduxjs/toolkit";
import axios from "axios";

const initialState = {
  user: null,
  likedMovies: [],
  myList: [],
};

export const addToDatabase = async ({
  uid,
  email,
  name,
  phone,
  like,
  list,
}) => {
  try {
    await axios.post("https://localhost:5000/api/user/add", {
      uid: uid,
      name: name,
      email: email,
      phone: phone,
      likedMovies: like,
      listMovies: list,
    });
  } catch (error) {
    console.log(error.message);
  }
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.

export const userSlice = createSlice({
  name: "user",
  initialState,

  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    login: (state, action) => {
      state.user = action.payload;
    },

    logout: (state, action) => {
      state.user = null;
    },

    like: (state, action) => {
      console.log("liked movies set");
      state.likedMovies.push(action.payload);
    },

    addToList: (state, action) => {
      console.log("add to my list");
      state.myList.push(action.payload);
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.

  // extraReducers: (builder) => {
  //   builder.addCase(getGenres.fulfilled, (state, action) => {
  //     state.movies = action.payload;
  //     state.genresLoaded = true;
  //   });
  // },
});

export const { login, logout, like, addToList } = userSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectUser = (state) => state.user.user;
export const selectLikedMovies = (state) => state.user.likedMovies;
export const selectListMovies = (state) => state.user.myList;
// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.

export default userSlice.reducer;
